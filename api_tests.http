@baseUrl = http://localhost:3001
@contentType = application/json
@authToken = YOUR_TOKEN_HEREgvuvuyv
@userId = 1
@recruiterId = 1
@adminId = 1
@testId = 1

###############################################
# 1. TESTS DE BASE
###############################################

### Test de la page d'accueil
GET {{baseUrl}}/ressources/

###############################################
# 2. GESTION DES UTILISATEURS
###############################################

### Créer un nouvel utilisateur (avec name au lieu de firstName/lastName)
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "password": "Password123!",
  "role": "developer"
}

### Créer un autre utilisateur
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "name": "Jane Smith",
  "email": "jane.smith@example.com",
  "password": "Password456!",
  "role": "developer"
}

### Tentative de création d'un utilisateur sans rôle (doit échouer)
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "name": "Missing Role",
  "email": "missing.role@example.com",
  "password": "Password123!"
}

### Tentative de création d'un utilisateur avec un rôle invalide (doit échouer)
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "name": "Invalid Role",
  "email": "invalid.role@example.com",
  "password": "Password123!",
  "role": "invalid_role"
}

### Se connecter
# Cette requête vous donnera un token JWT que vous devrez utiliser pour les autres requêtes
POST {{baseUrl}}/api/users/login
Content-Type: {{contentType}}

{
  "email": "john.doe@example.com",
  "password": "Password123!"
}

### Se connecter avec des identifiants incorrects (test d'erreur)
POST {{baseUrl}}/api/users/login
Content-Type: {{contentType}}

{
  "email": "john.doe@example.com",
  "password": "WrongPassword!"
}

### Récupérer tous les utilisateurs
GET {{baseUrl}}/api/users
Authorization: Bearer {{authToken}}

### Rechercher des utilisateurs par nom (query parameter)
GET {{baseUrl}}/api/users?name=John
Authorization: Bearer {{authToken}}

### Récupérer un utilisateur spécifique
GET {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}

### Récupérer un utilisateur inexistant (test d'erreur)
GET {{baseUrl}}/api/users/999
Authorization: Bearer {{authToken}}

### Mettre à jour un utilisateur
PUT {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "John Updated",
  "email": "john.updated@example.com"
}

### Mettre à jour un utilisateur inexistant (test d'erreur)
PUT {{baseUrl}}/api/users/999
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "NonExistent User",
  "email": "nonexistent@example.com"
}

### Supprimer un utilisateur
DELETE {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}

### Supprimer un utilisateur inexistant (test d'erreur)
DELETE {{baseUrl}}/api/users/999
Authorization: Bearer {{authToken}}

### Filtrer les utilisateurs par rôle (admin)
GET {{baseUrl}}/api/users?role=admin
Authorization: Bearer {{authToken}}

### Filtrer les utilisateurs par rôle (developer)
GET {{baseUrl}}/api/users?role=developer
Authorization: Bearer {{authToken}}

### Filtrer les utilisateurs par rôle (recruiter)
GET {{baseUrl}}/api/users?role=recruiter
Authorization: Bearer {{authToken}}

### Créer un utilisateur avec un rôle spécifique
POST {{baseUrl}}/api/users
Content-Type: {{contentType}}

{
  "name": "Admin User",
  "email": "admin.user@example.com",
  "password": "Password123!",
  "role": "admin"
}

### Mettre à jour le rôle d'un utilisateur
PUT {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "role": "recruiter"
}

###############################################
# 3. GESTION DES RECRUTEURS
###############################################

### Créer un nouveau recruteur
POST {{baseUrl}}/api/recruiters
Content-Type: {{contentType}}

{
  "firstName": "Robert",
  "lastName": "Johnson",
  "email": "robert.johnson@example.com",
  "password": "Recruiter123!",
  "company": "Tech Solutions Inc.",
  "position": "Senior Recruiter",
  "phone": "+1234567890",
  "website": "https://techsolutions.example.com"
}

### Créer un autre recruteur
POST {{baseUrl}}/api/recruiters
Content-Type: {{contentType}}

{
  "firstName": "Sarah",
  "lastName": "Williams",
  "email": "sarah.williams@example.com",
  "password": "Recruiter456!",
  "company": "Global Talent Group",
  "position": "HR Manager",
  "phone": "+1987654321",
  "website": "https://globaltalent.example.com"
}

### Se connecter en tant que recruteur
# Cette requête vous donnera un token JWT que vous devrez utiliser pour les autres requêtes
POST {{baseUrl}}/api/recruiters/login
Content-Type: {{contentType}}

{
  "email": "robert.johnson@example.com",
  "password": "Recruiter123!"
}

### Se connecter avec des identifiants incorrects (test d'erreur)
POST {{baseUrl}}/api/recruiters/login
Content-Type: {{contentType}}

{
  "email": "robert.johnson@example.com",
  "password": "WrongPassword!"
}

### Récupérer tous les recruteurs
GET {{baseUrl}}/api/recruiters
Authorization: Bearer {{authToken}}

### Rechercher des recruteurs par nom ou entreprise (query parameter)
GET {{baseUrl}}/api/recruiters?name=Tech
Authorization: Bearer {{authToken}}

### Récupérer un recruteur spécifique
GET {{baseUrl}}/api/recruiters/{{recruiterId}}
Authorization: Bearer {{authToken}}

### Récupérer un recruteur inexistant (test d'erreur)
GET {{baseUrl}}/api/recruiters/999
Authorization: Bearer {{authToken}}

### Mettre à jour un recruteur
PUT {{baseUrl}}/api/recruiters/{{recruiterId}}
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "firstName": "Robert",
  "lastName": "Johnson",
  "company": "Tech Solutions Global",
  "position": "Head of Recruitment",
  "website": "https://techsolutionsglobal.example.com"
}

### Mettre à jour un recruteur inexistant (test d'erreur)
PUT {{baseUrl}}/api/recruiters/999
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "firstName": "NonExistent",
  "lastName": "Recruiter",
  "company": "Fake Company"
}

### Supprimer un recruteur
DELETE {{baseUrl}}/api/recruiters/{{recruiterId}}
Authorization: Bearer {{authToken}}

### Supprimer un recruteur inexistant (test d'erreur)
DELETE {{baseUrl}}/api/recruiters/999
Authorization: Bearer {{authToken}}

###############################################
# 4. GESTION DES ADMINISTRATEURS
###############################################

### Créer un nouvel administrateur
POST {{baseUrl}}/api/admins
Content-Type: {{contentType}}

{
  "firstName": "Admin",
  "lastName": "User",
  "email": "admin@example.com",
  "password": "Admin123!"
}

### Créer un autre administrateur
POST {{baseUrl}}/api/admins
Content-Type: {{contentType}}

{
  "firstName": "Super",
  "lastName": "Admin",
  "email": "superadmin@example.com",
  "password": "SuperAdmin123!"
}

### Se connecter en tant qu'administrateur
# Cette requête vous donnera un token JWT que vous devrez utiliser pour les autres requêtes
POST {{baseUrl}}/api/admins/login
Content-Type: {{contentType}}

{
  "email": "admin@example.com",
  "password": "Admin123!"
}

### Se connecter avec des identifiants incorrects (test d'erreur)
POST {{baseUrl}}/api/admins/login
Content-Type: {{contentType}}

{
  "email": "admin@example.com",
  "password": "WrongPassword!"
}

### Récupérer tous les administrateurs
GET {{baseUrl}}/api/admins
Authorization: Bearer {{authToken}}

### Rechercher des administrateurs par nom (query parameter)
GET {{baseUrl}}/api/admins?name=Admin
Authorization: Bearer {{authToken}}

### Récupérer un administrateur spécifique
GET {{baseUrl}}/api/admins/{{adminId}}
Authorization: Bearer {{authToken}}

### Récupérer un administrateur inexistant (test d'erreur)
GET {{baseUrl}}/api/admins/999
Authorization: Bearer {{authToken}}

### Mettre à jour un administrateur
PUT {{baseUrl}}/api/admins/{{adminId}}
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "firstName": "Admin",
  "lastName": "Updated",
  "email": "admin.updated@example.com"
}

### Mettre à jour un administrateur inexistant (test d'erreur)
PUT {{baseUrl}}/api/admins/999
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "firstName": "NonExistent",
  "lastName": "Admin",
  "email": "nonexistent@example.com"
}

### Supprimer un administrateur
DELETE {{baseUrl}}/api/admins/{{adminId}}
Authorization: Bearer {{authToken}}

### Supprimer un administrateur inexistant (test d'erreur)
DELETE {{baseUrl}}/api/admins/999
Authorization: Bearer {{authToken}}

###############################################
# 5. TESTS D'ERREURS DIVERSES
###############################################

### Test d'une route inexistante (erreur 404)
GET {{baseUrl}}/api/nonexistentroute

### Test d'une requête sans token d'authentification (erreur 401)
GET {{baseUrl}}/api/users

### Test d'une requête mal formée (erreur 400)
POST {{baseUrl}}/api/admins
Content-Type: {{contentType}}

{
  "firstName": "Invalid",
  "lastName": "Admin"
  // Champs obligatoires manquants
}

###############################################
# 6. GESTION DES TESTS DE CODE
###############################################

### Créer un nouveau test
POST {{baseUrl}}/api/tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Algorithme de tri à bulles",
  "description": "Implementer un algorithme de tri à bulles pour trier un tableau d'entiers",
  "difficulty": "Intermédiaire",
  "language": "JavaScript",
  "category": "Algorithmes",
  "duration": 60,
  "passing_score": 70,
  "skills": ["JavaScript", "Algorithmes"]
}

### Test création sans nom (doit échouer)
POST {{baseUrl}}/api/tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "description": "Test sans nom",
  "difficulty": "Intermédiaire",
  "language": "JavaScript",
  "category": "Algorithmes",
  "duration": 60,
  "passing_score": 70,
  "skills": ["JavaScript", "Algorithmes"]
}

### Test création sans description (doit échouer)
POST {{baseUrl}}/api/tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Test sans description",
  "difficulty": "Intermédiaire",
  "language": "JavaScript",
  "category": "Algorithmes",
  "duration": 60,
  "passing_score": 70,
  "skills": ["JavaScript", "Algorithmes"]
}

### Test création sans language (doit échouer)
POST {{baseUrl}}/api/tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Test sans langage",
  "description": "Test sans langage spécifié",
  "difficulty": "Intermédiaire",
  "category": "Algorithmes",
  "duration": 60,
  "passing_score": 70,
  "skills": ["JavaScript", "Algorithmes"]
}

### Test création avec skills vide (doit échouer)
POST {{baseUrl}}/api/tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Test sans compétences",
  "description": "Test avec un tableau de compétences vide",
  "difficulty": "Intermédiaire",
  "language": "JavaScript",
  "category": "Algorithmes",
  "duration": 60,
  "passing_score": 70,
  "skills": []
}

### Créer un autre test
POST {{baseUrl}}/api/tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Recherche binaire",
  "description": "Implémenter une fonction de recherche binaire pour trouver un élément dans un tableau trié",
  "difficulty": "Avancé",
  "language": "Python",
  "category": "Algorithmes",
  "duration": 90,
  "passing_score": 80,
  "skills": ["Python", "Algorithmes"]
}

### Récupérer tous les tests
GET {{baseUrl}}/api/tests
Authorization: Bearer {{authToken}}

### Filtrer les tests par difficulté
GET {{baseUrl}}/api/tests?difficulty=Intermédiaire
Authorization: Bearer {{authToken}}

### Filtrer les tests par langage
GET {{baseUrl}}/api/tests?language=JavaScript
Authorization: Bearer {{authToken}}

### Filtrer les tests par catégorie
GET {{baseUrl}}/api/tests?category=Frontend
Authorization: Bearer {{authToken}}

### Filtrer les tests par difficulté et catégorie
GET {{baseUrl}}/api/tests?difficulty=Intermédiaire&category=Algorithmes
Authorization: Bearer {{authToken}}

### Filtrer les tests par skills
GET {{baseUrl}}/api/tests?skills=JavaScript
Authorization: Bearer {{authToken}}

### Filtrer avec une valeur invalide (doit retourner une erreur)
GET {{baseUrl}}/api/tests?difficulty=Invalid
Authorization: Bearer {{authToken}}

### Rechercher des tests par nom
GET {{baseUrl}}/api/tests?name=tri
Authorization: Bearer {{authToken}}

### Récupérer un test spécifique
GET {{baseUrl}}/api/tests/{{testId}}
Authorization: Bearer {{authToken}}

### Récupérer un test inexistant (test d'erreur)
GET {{baseUrl}}/api/tests/999
Authorization: Bearer {{authToken}}

### Mettre à jour un test
PUT {{baseUrl}}/api/tests/{{testId}}
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Algorithme de tri à bulles - Optimisé",
  "description": "Implementer un algorithme de tri à bulles optimisé pour trier un tableau d'entiers",
  "difficulty": "Expert",
  "category": "Algorithmes",
  "duration": 120,
  "passing_score": 90,
  "skills": ["JavaScript", "Algorithmes", "Optimisation"]
}

### Test de mise à jour partielle
PUT {{baseUrl}}/api/tests/{{testId}}
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "difficulty": "Débutant",
  "duration": 30,
  "passing_score": 50
}

### Test de mise à jour avec skills vide (doit échouer)
PUT {{baseUrl}}/api/tests/{{testId}}
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "skills": []
}

### Test de mise à jour du langage
PUT {{baseUrl}}/api/tests/{{testId}}
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "language": "Python"
}

### Test de mise à jour avec champ non autorisé (doit être ignoré)
PUT {{baseUrl}}/api/tests/{{testId}}
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Test mise à jour",
  "invalid_field": "Cette valeur doit être ignorée"
}

### Test avec difficulté invalide
POST {{baseUrl}}/api/tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Test invalide",
  "description": "Test avec une difficulté invalide",
  "difficulty": "Impossible",
  "language": "JavaScript",
  "category": "Frontend",
  "duration": 60,
  "passing_score": 70,
  "skills": ["JavaScript", "React"]
}

### Test avec catégorie invalide
POST {{baseUrl}}/api/tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Test invalide",
  "description": "Test avec une catégorie invalide",
  "difficulty": "Intermédiaire",
  "language": "JavaScript",
  "category": "InvalidCategory",
  "duration": 60,
  "passing_score": 70,
  "skills": ["JavaScript", "React"]
}

### Test avec durée invalide
POST {{baseUrl}}/api/tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Test invalide",
  "description": "Test avec une durée invalide",
  "difficulty": "Intermédiaire",
  "language": "JavaScript",
  "category": "Frontend",
  "duration": 45,
  "passing_score": 70,
  "skills": ["JavaScript", "React"]
}

### Test avec score invalide
POST {{baseUrl}}/api/tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Test invalide",
  "description": "Test avec un score invalide",
  "difficulty": "Intermédiaire",
  "language": "JavaScript",
  "category": "Frontend",
  "duration": 60,
  "passing_score": 65,
  "skills": ["JavaScript", "React"]
}

### Supprimer un test
DELETE {{baseUrl}}/api/tests/{{testId}}
Authorization: Bearer {{authToken}}

### Supprimer un test inexistant (test d'erreur)
DELETE {{baseUrl}}/api/tests/999
Authorization: Bearer {{authToken}}

###############################################
# 7. GESTION DES TESTS UTILISATEUR
###############################################

### Création d'un test utilisateur
POST {{baseUrl}}/api/user-tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "user_id": 1,
  "test_id": 1,
  "score": 85,
  "status": "completed",
  "result_details": {
    "correct_answers": 17,
    "total_questions": 20,
    "time_taken_minutes": 45
  }
}

### Création d'un test utilisateur en cours
POST {{baseUrl}}/api/user-tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "user_id": 2,
  "test_id": 1,
  "score": 0,
  "status": "in_progress"
}

### Création avec un score invalide (doit échouer)
POST {{baseUrl}}/api/user-tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "user_id": 1,
  "test_id": 1,
  "score": 120,
  "status": "completed"
}

### Création avec un statut invalide (doit échouer)
POST {{baseUrl}}/api/user-tests
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "user_id": 1,
  "test_id": 1,
  "score": 75,
  "status": "invalid_status"
}

### Récupération de tous les tests utilisateur
GET {{baseUrl}}/api/user-tests
Authorization: Bearer {{authToken}}

### Filtrage par utilisateur
GET {{baseUrl}}/api/user-tests?user_id=1
Authorization: Bearer {{authToken}}

### Filtrage par test
GET {{baseUrl}}/api/user-tests?test_id=1
Authorization: Bearer {{authToken}}

### Filtrage par statut
GET {{baseUrl}}/api/user-tests?status=completed
Authorization: Bearer {{authToken}}

### Filtrage combiné
GET {{baseUrl}}/api/user-tests?user_id=1&status=completed
Authorization: Bearer {{authToken}}

### Récupération d'un test utilisateur spécifique
GET {{baseUrl}}/api/user-tests/1
Authorization: Bearer {{authToken}}

### Récupération d'un test utilisateur inexistant
GET {{baseUrl}}/api/user-tests/999
Authorization: Bearer {{authToken}}

### Mise à jour d'un test utilisateur
PUT {{baseUrl}}/api/user-tests/1
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "score": 90,
  "status": "completed",
  "end_time": "2025-03-30T15:00:00Z",
  "result_details": {
    "correct_answers": 18,
    "total_questions": 20,
    "time_taken_minutes": 52
  }
}

### Mise à jour avec un score invalide
PUT {{baseUrl}}/api/user-tests/1
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "score": -10
}

### Mise à jour avec un statut invalide
PUT {{baseUrl}}/api/user-tests/1
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "status": "incorrect_status"
}

### Suppression d'un test utilisateur
DELETE {{baseUrl}}/api/user-tests/1
Authorization: Bearer {{authToken}}

### Suppression d'un test utilisateur inexistant
DELETE {{baseUrl}}/api/user-tests/999
Authorization: Bearer {{authToken}}

###############################################
# 8. GESTION DES RÉSULTATS DE TESTS
###############################################

### Création d'un résultat de test
POST {{baseUrl}}/api/user-test-results
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "user_test_id": 1,
  "error_type": "syntax_error",
  "line_number": 25,
  "suggestion": "Vérifiez la syntaxe de la fonction. Il manque une accolade fermante.",
  "execution_time": 120
}

### Création d'un autre résultat de test
POST {{baseUrl}}/api/user-test-results
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "user_test_id": 1,
  "error_type": "logic_error",
  "line_number": 42,
  "suggestion": "La condition dans votre boucle while peut entraîner une boucle infinie.",
  "execution_time": 85
}

### Création avec ID de test utilisateur invalide (doit échouer)
POST {{baseUrl}}/api/user-test-results
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "user_test_id": 999,
  "error_type": "syntax_error",
  "line_number": 25,
  "suggestion": "Vérifiez la syntaxe de la fonction.",
  "execution_time": 120
}

### Création avec numéro de ligne invalide (doit échouer)
POST {{baseUrl}}/api/user-test-results
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "user_test_id": 1,
  "error_type": "syntax_error",
  "line_number": 0,
  "suggestion": "Vérifiez la syntaxe de la fonction.",
  "execution_time": 120
}

### Création avec temps d'exécution invalide (doit échouer)
POST {{baseUrl}}/api/user-test-results
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "user_test_id": 1,
  "error_type": "syntax_error",
  "line_number": 25,
  "suggestion": "Vérifiez la syntaxe de la fonction.",
  "execution_time": -10
}

### Récupération de tous les résultats de tests
GET {{baseUrl}}/api/user-test-results
Authorization: Bearer {{authToken}}

### Filtrage par ID de test utilisateur
GET {{baseUrl}}/api/user-test-results?user_test_id=1
Authorization: Bearer {{authToken}}

### Filtrage par type d'erreur
GET {{baseUrl}}/api/user-test-results?error_type=syntax_error
Authorization: Bearer {{authToken}}

### Récupération d'un résultat de test spécifique
GET {{baseUrl}}/api/user-test-results/1
Authorization: Bearer {{authToken}}

### Récupération d'un résultat de test inexistant
GET {{baseUrl}}/api/user-test-results/999
Authorization: Bearer {{authToken}}

### Mise à jour d'un résultat de test
PUT {{baseUrl}}/api/user-test-results/1
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "error_type": "syntax_error_updated",
  "line_number": 26,
  "suggestion": "Vérifiez la syntaxe de la fonction. Il manque une accolade fermante. Correction suggérée.",
  "execution_time": 150
}

### Mise à jour avec numéro de ligne invalide
PUT {{baseUrl}}/api/user-test-results/1
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "line_number": -5
}

### Mise à jour avec temps d'exécution invalide
PUT {{baseUrl}}/api/user-test-results/1
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "execution_time": -20
}

### Suppression d'un résultat de test
DELETE {{baseUrl}}/api/user-test-results/1
Authorization: Bearer {{authToken}}

### Suppression d'un résultat de test inexistant
DELETE {{baseUrl}}/api/user-test-results/999
Authorization: Bearer {{authToken}}